\nimport { Client, DecodedMessage, Group } from \"@xmtp/node-sdk\";\nimport { isSameString, log } from \"./helpers/utils.js\";\nimport { Game } from \"./game.js\";\nimport { HangmanGame } from \"./hangman.js\";\n\nconst MAX_RETRIES = 6;\nconst RETRY_DELAY_MS = 10000;\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nexport async function listenForMessages(client: Client) {\n  let retryCount = 0;\n\n  while (retryCount < MAX_RETRIES) {\n    try {\n      log(\n        `Starting message stream... (Attempt ${retryCount + 1}/${MAX_RETRIES})`,\n      );\n      const stream = await client.conversations.streamAllMessages();\n      log(\"Message stream started successfully. Waiting for messages...\");\n\n      const blackjackGames = new Map<string, BlackjackGame>();\n\n      for await (const message of stream) {\n        log(`Received message: ${message?.content}`);\n\n        if (shouldSkip(message, client)) {\n          log(\"Skipping message - either from self or wrong content type\");\n          continue;\n        }\n\n        const content = message.content as string;\n\n        // Handle help command\n        if (content.toLowerCase() === \"/help\") {\n          log(\"Processing help command...\");\n          try {\n            const conversationId = message?.conversationId;\n            if (!conversationId) {\n              log(\"Error: Conversation ID not found in message\");\n              continue;\n            }\n\n            const conversation = await client.conversations.getConversationById(conversationId);\n            if (!conversation) {\n              log(`Error: Could not find conversation for message ${message?.id} with conversationId ${conversationId}`);\n              continue;\n            }\n            await conversation.send(\n              \"ðŸŽ® Hangman Commands:\\n\" +\n                \"/join - Join the game\\n\" +\n                \"/starthangman - Start a new game\\n\" +\n                \"/guess <letter> - Guess a letter\\n\" +\n                \"/guessword <word> - Guess the entire word\\n\" +\n                \"/leaderboard - Show scores\",\n            );\n            log(\"Help message sent successfully\");\n          } catch (error) {\n            log(`Error sending help message: ${error}`);\n          }\n          continue;\n        }\n\n        // Handle greetings\n        if (content.toLowerCase() === \"hi\") {\n          const conversation = message.conversation;\n          if (conversation) {\n            await conversation.send(\"Hello! ðŸ‘‹\");\n          }\n          continue;\n        }\n\n        // Handle game commands\n        if (content.startsWith(\"/\")) {\n          const conversationId = message?.conversationId;\n          if (!conversationId) {\n            log(\"Error: Conversation ID not found in message\");\n            continue;\n          }\n\n          const conversation = await client.conversations.getConversationById(conversationId);\n          if (!conversation) {\n            log(`Error: Could not find conversation for message ${message?.id}`);\n            continue;\n          }\n\n          if (!conversation.isGroup) {\n            await conversation.send(\"This game can only be played in group chats!\");\n            continue;\n          }\n\n          const group = conversation as Group;\n          let game = blackjackGames.get(group.id);\n\n          if (!game) {\n            game = new HangmanGame(group);\n            blackjackGames.set(group.id, game);\n            await group.send(\"Hangman game ready! Use /join to join the game and /starthangman to begin.\");\n            continue;\n          }\n\n          await game.handleCommand(message);\n        }\n      }\n\n      retryCount = 0;\n    } catch (streamError: unknown) {\n      retryCount++;\n      log(\n        `Stream error (Attempt ${retryCount}/${MAX_RETRIES}): ${streamError instanceof Error ? streamError.message : String(streamError)}`,\n      );\n\n      if (retryCount < MAX_RETRIES) {\n        log(\n          `Waiting ${RETRY_DELAY_MS / 1000} seconds before retrying stream...`,\n        );\n        await sleep(RETRY_DELAY_MS);\n      }\n    }\n  }\n}\n\nfunction shouldSkip(message: DecodedMessage<any> | undefined, client: Client) {\n  if (!message) {\n    return true;\n  }\n  return (\n    isSameString(message.senderInboxId, client.inboxId) ||\n    message.contentType?.typeId !== \"text\"\n  );\n}\n